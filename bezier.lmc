#include "bezier.h"
#include "rmath.h"

/*:: Common
local res = ""
for i = 3, 4 do
    res = res .. source:gsub ("_N_", tostring (i))
end
res = res .. source:gsub ("r_N_", "r")
                   :gsub ("%[_N_%]", "*")
                   :gsub ("_N_", "curve->pointCount")
return res
::*/
//:{
#define _N_ 4

typedef struct
{   vec2 points[_N_];
    vec2 coefficients[_N_];
}   Bezier_N_;
//:}

void bezier_N_Update (Bezier_N_* curve)
{   for (size_t i = 0; i < _N_; ++i)
    {   vec2 sum = {};
        for (size_t j = 0; j <= i; ++j)
        {   float factor = rm_choose (i, j);
            if ((i^j) & 1) factor = -factor;
            sum = vec2add (sum, vec2scalarmul (curve->points[j], factor));
        }
        curve->coefficients[i] = vec2scalarmul (sum, rm_choose (_N_ - 1, i));
    }
}

vec2 bezier_N_Position (Bezier_N_* curve, float t)
{   vec2 sum = {};
    float u = 1.0f; // current power of t
    for (size_t i = 0; i < _N_; ++i)
    {   sum = vec2add (sum, vec2scalarmul (curve->coefficients[i], u));
        u *= t;
    }
    return sum;
}

vec2 bezier_N_Velocity (Bezier_N_* curve, float t)
{   vec2 sum = {};
    float u = 1.0f;
    for (size_t i = 1; i < _N_; ++i)
    {   sum = vec2add (sum, vec2scalarmul (curve->coefficients[i], u*i));
        u *= t;
    }
    return sum;
}

//::
/*
size_t bezier3IntersectionCount (Bezier3* curve, vec2 p, vec2 d)
{
    vec2 n = vec2perp (d);
    float t = -0.5f*vec2dot (curve->coefficients[1], n)
                  / vec2dot (curve->coefficients[2], n);
    if (t < 0.0f || 1.0f < t)
        t = 0.0f;

    float s = vec2dot (bezier3Position (curve, 0), n);
    float m = vec2dot (bezier3Position (curve, t), n);
    float e = vec2dot (bezier3Position (curve, 1), n);

    return (signbit (s) != signbit (m))
        +  (signbit (m) != signbit (e));
}
*/

size_t bezier3IntersectionCount (Bezier3* curve, vec2 p, vec2 d)
{
    vec2 n = vec2perp (d);

    float a = vec2dot (curve->coefficients[2], n);
    float b = vec2dot (curve->coefficients[1], n);
    float c = vec2dot (vec2sub (curve->coefficients[0], p), n);

    float t[2];
    if (quadraticSolve (a, b, c, t))
    {
        return (0.0f <= t[0] && t[0] < 1.0f)
            +  (0.0f <= t[1] && t[1] < 1.0f);
    }
    return 0;
}
