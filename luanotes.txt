

to do `x = math.floor (1.5)` in lua from c

1. `lua_getglobal (L, "math")`
  a. verify with `lua_istable (L, -1)`

2. `lua_pushstring (L, "floor")`

3. `lua_gettable (L, -2)`
   gets the key from the top of the stack
  a. verify with `lua_isfunction (L, -1)`

4. `lua_pushnumber (L, 1.5)`

5. `lua_call (L, 1, 1)`
   state, args, rets

6. `lua_setglobal (L, "x")`

7. `lua_pop (L, 1)`


1.         2.         3.         4.         5.         6.         7.
╷         ╷╷         ╷╷         ╷╷         ╷╷         ╷╷         ╷╷         ╷
├─────────┤├─────────┤├─────────┤├─────────┤├─────────┤├─────────┤╘═════════╛
│ math {} ││ "floor" ││ floor() ││   1.5   ││    1    ││ math {} │
╘═════════╛├─────────┤├─────────┤├─────────┤├─────────┤╘═════════╛
           │ math {} ││ math {} ││ floor() ││ math {} │
           ╘═════════╛╘═════════╛├─────────┤╘═════════╛
                                 │ math {} │
                                 ╘═════════╛



link function to lua

`int function_pointer (lua_State* L)`
arguments are provided on the given stack at the bottom
returns are placed at the top of the stack
the C function returns the number of arguments

`lua_register (L, "luaname", function_pointer)`
is a shortcut for
`lua_pushcfunction (L, function_pointer)`
`lua_getglobal (L, "luaname")`



Functions:


`int j = lua_absindex (L, int i)`

    ┎──────┬i─────┬──────╖
    ┃ .... │ ???? │ .... ║
    ┖──────┴─────j┴──────╜

`lua_checkstack (L, int n)`
- checks if there is space for n more stack values

    ┎──────┬──────╥──────┬MAX───┒
    ┃ .... │ ???? ║  ..  │      ┃
    ┖──────┴────-1╨──────┴──────┚

`lua_atpanic (L, luaCFunction panicf)` [-(0),+(0)]



`lua_arith (L, int op)` [-(1|2), +(1)]
- list of operations:
  ────────────────┬────────────────┬────────────────┬─────────────────
   LUA_OPADD  1+2 │ LUA_OPMUL  1*2 │ LUA_OPBAND 1&2 │ LUA_OPIDIV 1//2
   LUA_OPSUB  1-2 │ LUA_OPDIV  1/2 │ LUA_OPBOR  1|2 │ LUA_OPSHL  1<<2
   LUA_OPMOD  1%2 │ LUA_OPPOW  1^2 │ LUA_OPBXOR 1~2 │ LUA_OPSHR  1>>2
  ────────────────┼────────────────┼────────────────┼─────────────────
   LUA_OPUNM   -1 │ LUA_OPBNOT  ~1 │     ------     │     ------
  ────────────────┴────────────────┴────────────────┴─────────────────

    ┎──────┬──────┬──────╖
    ┃ .... │ a    │ b    ║
    ┖──────┴────-2┴────-1╜
    >> lua_arith (L, LUA_OPADD);
    ┎──────┬──────╖
    ┃ .... │ a+b  ║
    ┖──────┴────-1╜



`int lua_compare (L, int i, int j, int op)` [-(0), +(0)]
- list of operations:
  ─────────────┬─────────────┬─────────────
   LUA_OPEQ == │ LUA_OPLT  < │ LUA_OPLE <=
  ─────────────┴─────────────┴─────────────



`lua_concat (L, int n)` [-(n), +(1)]

    ┎──────┬──────┬──────┬──────╖
    ┃ .... │ val1 │ .... │ valN ║
    ┖──────┴────-N┴──────┴────-1╜
    >> lua_concat (L, N);
    ┎──────┬──────╖
    ┃ .... │ res  ║
    ┖──────┴────-1╜



`lua_copy (L, int from, int to)` [-(0), +(0)]

    ┎──────┬i─────┬──────┬l─────┬──────╖
    ┃ .... │ vali │ .... │ valj │ .... ║
    ┖──────┴──────┴──────┴──────┴──────╜
    >> lua_copy (L, i, j);
    ┎──────┬i─────┬──────┬l─────┬──────╖
    ┃ .... │ vali │ .... │ vali │ .... ║
    ┖──────┴──────┴──────┴──────┴──────╜



`lua_call (L, int args, int rets)` [-(args+1), +(rets)]

    ┎──────┬──────┬──────┬──────┬──────┬──────╖
    ┃ .... │ func │ arg1 │ arg2 │ .... │ argN ║
    ┖──────┴──────┴────-N┴──────┴──────┴────-1╜
    >> lua_call (L, N, M);
    ┎──────┬──────┬──────┬──────┬──────╖
    ┃ .... │ res1 │ res2 │ .... │ resM ║
    ┖──────┴────-M┴──────┴──────┴────-1╜



`int lua_getfield (L, int index, const char* key)` [-(0), +(1)]

    ┎──────┬i─────┬──────╖
    ┃ .... │ t={} │ .... ║
    ┖──────┴──────┴──────╜
    >> lua_getfield (L, i, k);
    ┎──────┬i─────┬──────┬──────╖
    ┃ .... │ t={} │ .... │ t[k] ║
    ┖──────┴──────┴──────┴────-1╜

`lua_setfield (L, int index, const char* key)` [-(1), +(0)]

    ┎──────┬i─────┬──────┬──────╖
    ┃ .... │ t={} │ .... │ val  ║
    ┖──────┴──────┴──────┴────-1╜
    >> lua_setfield (L, i, k);
    ┎──────┬i─────┬──────╖
    ┃ .... │ t={} │ .... ║
    ┖──────┴──────┴──────╜

`lua_gettable (L, int index)` [-(1), +(1)]

    ┎──────┬i─────┬──────┬──────╖
    ┃ .... │ t={} │ .... │ k    ║
    ┖──────┴──────┴──────┴────-1╜
    >> lua_gettable (L, i);
    ┎──────┬i─────┬──────┬──────╖
    ┃ .... │ t={} │ .... │ t[k] ║
    ┖──────┴──────┴──────┴────-1╜

`lua_settable (L, int index)` [-(2), +(0)]

    ┎──────┬i─────┬──────┬──────┬──────╖
    ┃ .... │ t={} │ .... │ key  │ val  ║
    ┖──────┴──────┴──────┴────-2┴────-1╜
    >> lua_settable (L, i);
    ┎──────┬──────┬──────╖
    ┃ .... │ t={} │ .... ║
    ┖──────┴──────┴──────╜

