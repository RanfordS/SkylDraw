#include "core.h"
#include "luavec.h"
#include "shapes.h"
#include "buffergen.h"

void rua_setclass (lua_State* L, const char* name)
{
    lua_getglobal (L, name);
    lua_getfield (L, -1, "meta");
    lua_setmetatable (L, -3);
    lua_pop (L, 1);
}

// - Circle - //

static int l_circle_new (lua_State* L)
{
    lua_newtable (L);
    Circle* circle = lua_newuserdata (L, sizeof (Circle));

    circle->center = vec2_l2c (L, 1);
    circle->radius = lua_tonumber (L, 2);

    lua_setfield (L, -2, "data");
    rua_setclass (L, "Circle");
    return 1;
}

static int l_circle_3point (lua_State* L)
{
    lua_newtable (L);
    Circle* circle = lua_newuserdata (L, sizeof (Circle));

    vec2 a = vec2_l2c (L, 1);
    vec2 b = vec2_l2c (L, 2);
    vec2 c = vec2_l2c (L, 3);
    *circle = circle3Point (a, b, c);

    lua_setfield (L, -2, "data");
    rua_setclass (L, "Circle");
    return 1;
}

static int l_circle_pointNormalPoint (lua_State* L)
{
    lua_newtable (L);
    Circle* circle = lua_newuserdata (L, sizeof (Circle));

    vec2 a = vec2_l2c (L, 1);
    vec2 n = vec2_l2c (L, 2);
    vec2 b = vec2_l2c (L, 3);
    *circle = circlePointNormalPoint (a, n, b);

    lua_setfield (L, -2, "data");
    rua_setclass (L, "Circle");
    return 1;
}

//

static int l_circle_get_center (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Circle* circle = lua_touserdata (L, -1);

    vec2_c2l (L, circle->center);
    return 1;
}

static int l_circle_set_center (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Circle* circle = lua_touserdata (L, -1);
    circle->center = vec2_l2c (L, 2);
    return 0;
}

static int l_circle_get_radius (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Circle* circle = lua_touserdata (L, -1);

    lua_pushnumber (L, circle->radius);
    return 1;
}

static int l_circle_set_radius (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Circle* circle = lua_touserdata (L, -1);
    circle->radius = lua_tonumber (L, 2);
    return 0;
}

// - Arc - //

static int l_arc_new (lua_State* L)
{
    lua_newtable (L);
    Arc* arc = lua_newuserdata (L, sizeof (Arc));

    arc->center = vec2_l2c (L, 1);
    arc->radius = lua_tonumber (L, 2);
    arc->angleStart = lua_tonumber (L, 3);
    arc->angleRange = lua_tonumber (L, 4);

    lua_setfield (L, -2, "data");
    rua_setclass (L, "Arc");
    return 1;
}

static int l_arc_3point (lua_State* L)
{
    lua_newtable (L);
    Arc* arc = lua_newuserdata (L, sizeof (Arc));

    vec2 a = vec2_l2c (L, 1);
    vec2 b = vec2_l2c (L, 2);
    vec2 c = vec2_l2c (L, 3);
    *arc = arc3Point (a, b, c);

    lua_setfield (L, -2, "data");
    rua_setclass (L, "Arc");
    return 1;
}

static int l_arc_pointNormalPoint (lua_State* L)
{
    lua_newtable (L);
    Arc* arc = lua_newuserdata (L, sizeof (Arc));

    vec2 a = vec2_l2c (L, 1);
    vec2 n = vec2_l2c (L, 2);
    vec2 b = vec2_l2c (L, 3);
    *arc = arcPointNormalPoint (a, n, b);

    lua_setfield (L, -2, "data");
    rua_setclass (L, "Arc");
    return 1;
}

static int l_arc_flip (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Arc* arc = lua_touserdata (L, -1);

    arcFlip (arc);
    return 0;
}

static int l_arc_startPos (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Arc* arc = lua_touserdata (L, -1);

    vec2_c2l (L, arcStartPosition (arc));
    return 1;
}

static int l_arc_endPos (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Arc* arc = lua_touserdata (L, -1);

    vec2_c2l (L, arcEndPosition (arc));
    return 1;
}

//

static int l_arc_get_center (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Arc* arc = lua_touserdata (L, -1);

    vec2_c2l (L, arc->center);
    return 1;
}

static int l_arc_set_center (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Arc* arc = lua_touserdata (L, -1);

    arc->center = vec2_l2c (L, 2);
    return 0;
}
/*:: Arc members
local res = ""
for _, m in ipairs {"radius", "angleStart", "angleRange"} do
    res = res .. source:gsub ("_MEMBER_", m)
end
return res
::*/
//:{
#define _MEMBER_ radius
//:}
static int l_arc_get__MEMBER_ (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Arc* arc = lua_touserdata (L, -1);

    lua_pushnumber (L, arc->_MEMBER_);
    return 1;
}

static int l_arc_set__MEMBER_ (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Arc* arc = lua_touserdata (L, -1);

    arc->_MEMBER_ = lua_tonumber (L, 2);
    return 0;
}
//::

/*:: Specific Beziers
local res = ""
for i = 3, 4 do
    res = res .. source:gsub ("_N_", tostring (i))
end
return res
::*/
// - Bezier _N_ - //
//:{
#define _N_ 3
#define Bezier_N_ Bezier3
#define bezier_N_Update bezier3Update
#define bezier_N__POS_ bezier3Position
#define bezier_POS_ bezierPosition
//:}
static int l_bezier_N__new (lua_State* L)
{
    lua_newtable (L);

    Bezier_N_* curve = lua_newuserdata (L, sizeof (Bezier_N_));
    lua_setfield (L, -2, "data");

    for (int i = 0; i < _N_; ++i)
        curve->points[i] = vec2_l2c (L, i+1);

    lua_pushboolean (L, false);
    lua_setfield (L, -2, "uptodate");

    rua_setclass (L, "Bezier_N_");
    return 1;
}

static int l_bezier_N__update (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Bezier_N_* curve = lua_touserdata (L, -2);
    lua_pop (L, 1);

    bezier_N_Update (curve);

    lua_pushboolean (L, true);
    lua_setfield (L, 1, "uptodate");
    return 0;
}

static int l_bezier_N__geti (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Bezier_N_* curve = lua_touserdata (L, -2);
    size_t i = lua_tointeger (L, 2) - 1;

    vec2 v = curve->points[i];
    vec2_c2l (L, v);
    return 1;
}

static int l_bezier_N__seti (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Bezier_N_* curve = lua_touserdata (L, -2);
    size_t i = lua_tointeger (L, 2) - 1;
    vec2 v = vec2_l2c (L, 3);

    curve->points[i] = v;

    lua_pushboolean (L, false);
    lua_setfield (L, 1, "uptodate");
    return 0;
}

/*:: Specific bezier positionals
local res = ""
for _, p in ipairs {"Position", "Velocity"} do
    res = res .. source:gsub ("_POS_", p)
                       :gsub ("_Pos_", string.lower (p))
end
return res
::*/
static int l_bezier_N___Pos_ (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Bezier_N_* curve = lua_touserdata (L, -1);
    float t = lua_tonumber (L, 2);

    lua_getfield (L, 1, "uptodate");
    if (lua_toboolean (L, -1) != true)
        l_bezier_N__update (L);

    vec2 v = bezier_N__POS_ (curve, t);
    vec2_c2l (L, v);
    return 1;
}

//::
//::

// - Generic Bezier - //

static int l_bezier_new (lua_State* L)
{
    lua_getfield (L, 1, "data");
    vec2array* array = lua_touserdata (L, -1);
    lua_pop (L, 1);

    lua_newtable (L);
    Bezier* curve = lua_newuserdata (L, sizeof (Bezier));
    lua_setfield (L, -2, "data");

    curve->pointCount = array->count;
    size_t bytecount = array->count*sizeof (vec2);
    curve->points = malloc (bytecount);
    curve->coefficients = malloc (bytecount);
    memcpy (curve->points, array->verts, bytecount);

    lua_pushboolean (L, false);
    lua_setfield (L, -2, "uptodate");

    rua_setclass (L, "Bezier");
    return 1;
}

static int l_bezier_update (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Bezier* curve = lua_touserdata (L, -2);
    lua_pop (L, 1);

    bezierUpdate (curve);

    lua_pushboolean (L, true);
    lua_setfield (L, 1, "uptodate");
    return 0;
}

static int l_bezier_geti (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Bezier* curve = lua_touserdata (L, -2);
    size_t i = lua_tointeger (L, 2) - 1;

    vec2 v = curve->points[i];
    vec2_c2l (L, v);
    return 1;
}

static int l_bezier_seti (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Bezier* curve = lua_touserdata (L, -2);
    size_t i = lua_tointeger (L, 2) - 1;
    vec2 v = vec2_l2c (L, 3);

    curve->points[i] = v;

    lua_pushboolean (L, false);
    lua_setfield (L, 1, "uptodate");
    return 0;
}

/*:: Generic bezier positionals
local res = ""
for _, p in ipairs {"Position", "Velocity"} do
    res = res .. source:gsub ("_POS_", p)
                       :gsub ("_Pos_", string.lower (p))
end
return res
::*/
static int l_bezier__Pos_ (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Bezier* curve = lua_touserdata (L, -1);
    float t = lua_tonumber (L, 2);

    lua_getfield (L, 1, "uptodate");
    if (lua_toboolean (L, -1) != true)
        l_bezier_update (L);

    vec2 v = bezier_POS_ (curve, t);
    vec2_c2l (L, v);
    return 1;
}

//::
// - Fontline - //

static int l_fontline_new (lua_State* L)
{
    lua_getfield (L, 1, "data");
    vec2array* array = lua_touserdata (L, -1);
    lua_pop (L, 1);

    lua_newtable (L);
    Fontline* curve = lua_newuserdata (L, sizeof (Fontline));
    lua_setfield (L, -2, "data");

    curve->pointCount = array->count;
    curve->points = malloc (array->count*sizeof (vec2));
    curve->oncurve = malloc (array->count*sizeof (bool));
    memcpy (curve->points, array->verts, array->count*sizeof (vec2));

    for (size_t i = 0; i < array->count; ++i)
    {
        lua_geti (L, 2, i+1);
        curve->oncurve[i] = lua_toboolean (L, -1);
        lua_pop (L, 1);
    }

    lua_pushboolean (L, false);
    lua_setfield (L, -2, "uptodate");

    rua_setclass (L, "Fontline");
    return 1;
}

static int l_fontline_getvi (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Fontline* curve = lua_touserdata (L, -1);
    size_t i = lua_tointeger (L, 2) - 1;

    vec2 v = curve->points[i];
    vec2_c2l (L, v);
    return 1;
}

static int l_fontline_setvi (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Fontline* curve = lua_touserdata (L, -1);
    size_t i = lua_tointeger (L, 2) - 1;
    vec2 v = vec2_l2c (L, 3);

    curve->points[i] = v;
    return 0;
}

static int l_fontline_getbi (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Fontline* curve = lua_touserdata (L, -1);
    size_t i = lua_tointeger (L, 2) - 1;

    bool b = curve->oncurve[i];
    lua_pushboolean (L, b);
    return 1;
}

static int l_fontline_setbi (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Fontline* curve = lua_touserdata (L, -1);
    size_t i = lua_tointeger (L, 2) - 1;
    bool b = lua_toboolean (L, 3);

    curve->oncurve[i] = b;
    return 0;
}

// - Buffergen - //

static int l_deleteBuffer (lua_State* L)
{
    lua_getfield (L, 1, "buffer");
    BufferInfo* buffer = lua_touserdata (L, -1);
    deleteBuffer (buffer);
    return 0;
}

static int l_createBezierBuffer (lua_State* L)
{
    lua_getfield (L, 1, "data");
    Bezier* curve = lua_touserdata (L, -1);

    BufferInfo* buffer = lua_newuserdata (L, sizeof (BufferInfo));
    buffer->vertCount = lua_tointeger (L, 2);
    createBezierBuffer (curve, buffer);
}

// - Register - //
//:{
#define l_circle__FUNC_ l_circle_new
#define l_arc__FUNC_ l_arc_new
#define l_bezier_N___FUNC_ l_bezier_new
#define l_fontline__FUNC_ l_fontline_new
//:}
void initLuaShapes (void)
{
    lua_newtable (luaState);

/*:: Register circle functions
local res = ""
for _, f in ipairs {"new", "3point", "pointNormalPoint", "get_center",
                    "set_center", "get_radius", "set_radius"}
do
    res = res .. source:gsub ("_FUNC_", f)
end
return res
::*/
        lua_pushcfunction (luaState, l_circle__FUNC_);
        lua_setfield (luaState, -2, "_FUNC_");

//::
    lua_setglobal (luaState, "Circle");

    lua_newtable (luaState);

/*:: Register arc functions
local res = ""
for _, f in ipairs {"new", "3point", "pointNormalPoint", "flip",
                    "get_center", "set_center", "get_radius", "set_radius",
                    "get_angleStart", "set_angleStart", "startPos", "endPos",
                    "get_angleRange", "set_angleRange"}
do
    res = res .. source:gsub ("_FUNC_", f)
end
return res
::*/
        lua_pushcfunction (luaState, l_arc__FUNC_);
        lua_setfield (luaState, -2, "_FUNC_");

//::
    lua_setglobal (luaState, "Arc");

/*:: Register bezier types
local res = ""
for _, n in ipairs {"3","4",""} do
    res = res .. source:gsub ("_N_", n)
end
return res
::*/
    lua_newtable (luaState);

/*::
local res = ""
for _, f in ipairs {"new", "update", "geti", "seti", "position", "velocity"} do
    res = res .. source:gsub ("_FUNC_", f)
end
return res
::*/
        lua_pushcfunction (luaState, l_bezier_N___FUNC_);
        lua_setfield (luaState, -2, "_FUNC_");

//::
    lua_setglobal (luaState, "Bezier_N_");
//::

    lua_newtable (luaState);

/*::
local res = ""
for _, f in ipairs {"new", "getvi", "setvi", "getbi", "setbi"} do
    res = res .. source:gsub ("_FUNC_", f)
end
return res
::*/
        lua_pushcfunction (luaState, l_fontline__FUNC_);
        lua_setfield (luaState, -2, "_FUNC_");

//::
    lua_setglobal (luaState, "Fontline");

    luaL_dofile (luaState, "luashapesmeta.lua");
}

