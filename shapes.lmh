#pragma once
#include <stdbool.h>
#include "vec.h"
#include "rmath.h"

// Circle

typedef struct
{   vec2 center;
    float radius;
}   Circle;

extern Circle circle3Point (vec2 a, vec2 b, vec2 c);
extern Circle circlePointNormalPoint (vec2 a_pos, vec2 a_norm, vec2 b_pos);

// Arc

typedef struct
{   vec2 center;
    float radius;
    float angleStart;
    float angleRange;
}   Arc;

extern Arc arc3Point (vec2 a, vec2 b, vec2 c);
extern Arc arcPointNormalPoint (vec2 a_pos, vec2 a_norm, vec2 b_pos);
extern void arcFlip (Arc* arc);
extern vec2 arcStartPosition (Arc* arc);
extern vec2 arcEndPosition (Arc* arc);

/*:: Beziers
local res = ""
for i = 3, 4 do
    res = res .. source:gsub ("_N_", tostring (i))
end
return res
::*/
//:{
#define _N_ 4
//:}

typedef struct
{   vec2 points[_N_];
    vec2 coefficients[_N_];
}   Bezier_N_;

extern void bezier_N_Update (Bezier_N_* curve);
extern vec2 bezier_N_Position (Bezier_N_* curve, float t);
extern vec2 bezier_N_Velocity (Bezier_N_* curve, float t);

//::

typedef struct
{   size_t pointCount;
    vec2* points;
    vec2* coefficients;
}   Bezier;

extern void bezierUpdate (Bezier* curve);
extern vec2 bezierPosition (Bezier* curve, float t);
extern vec2 bezierVelocity (Bezier* curve, float t);

// Fontline

typedef struct
{   size_t pointCount;
    vec2* points;
    bool* oncurve;
}   Fontline;
